# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.byte_array import ByteArray  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class Face(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, index: int=1, data: ByteArray=None, valid: bool=True):  # noqa: E501
        """Face - a model defined in Swagger

        :param index: The index of this Face.  # noqa: E501
        :type index: int
        :param data: The data of this Face.  # noqa: E501
        :type data: ByteArray
        :param valid: The valid of this Face.  # noqa: E501
        :type valid: bool
        """
        self.swagger_types = {
            'index': int,
            'data': ByteArray,
            'valid': bool
        }

        self.attribute_map = {
            'index': 'index',
            'data': 'data',
            'valid': 'valid'
        }

        self._index = index
        self._data = data
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt) -> 'Face':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Face of this Face.  # noqa: E501
        :rtype: Face
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self) -> int:
        """Gets the index of this Face.

        User Face index  # noqa: E501

        :return: The index of this Face.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index: int):
        """Sets the index of this Face.

        User Face index  # noqa: E501

        :param index: The index of this Face.
        :type index: int
        """

        self._index = index

    @property
    def data(self) -> ByteArray:
        """Gets the data of this Face.

        User Face Data(Base64)  # noqa: E501

        :return: The data of this Face.
        :rtype: ByteArray
        """
        return self._data

    @data.setter
    def data(self, data: ByteArray):
        """Sets the data of this Face.

        User Face Data(Base64)  # noqa: E501

        :param data: The data of this Face.
        :type data: ByteArray
        """
        if data is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', data):  # noqa: E501
            raise ValueError("Invalid value for `data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._data = data

    @property
    def valid(self) -> bool:
        """Gets the valid of this Face.

          # noqa: E501

        :return: The valid of this Face.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid: bool):
        """Sets the valid of this Face.

          # noqa: E501

        :param valid: The valid of this Face.
        :type valid: bool
        """

        self._valid = valid
