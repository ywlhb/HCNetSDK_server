# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Card(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, index: int=1, card_no: str=None, card_password: str='', card_type: int=1, valid: bool=True):  # noqa: E501
        """Card - a model defined in Swagger

        :param index: The index of this Card.  # noqa: E501
        :type index: int
        :param card_no: The card_no of this Card.  # noqa: E501
        :type card_no: str
        :param card_password: The card_password of this Card.  # noqa: E501
        :type card_password: str
        :param card_type: The card_type of this Card.  # noqa: E501
        :type card_type: int
        :param valid: The valid of this Card.  # noqa: E501
        :type valid: bool
        """
        self.swagger_types = {
            'index': int,
            'card_no': str,
            'card_password': str,
            'card_type': int,
            'valid': bool
        }

        self.attribute_map = {
            'index': 'index',
            'card_no': 'cardNo',
            'card_password': 'cardPassword',
            'card_type': 'cardType',
            'valid': 'valid'
        }

        self._index = index
        self._card_no = card_no
        self._card_password = card_password
        self._card_type = card_type
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Card of this Card.  # noqa: E501
        :rtype: Card
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self) -> int:
        """Gets the index of this Card.

        User Card index  # noqa: E501

        :return: The index of this Card.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index: int):
        """Sets the index of this Card.

        User Card index  # noqa: E501

        :param index: The index of this Card.
        :type index: int
        """

        self._index = index

    @property
    def card_no(self) -> str:
        """Gets the card_no of this Card.


        :return: The card_no of this Card.
        :rtype: str
        """
        return self._card_no

    @card_no.setter
    def card_no(self, card_no: str):
        """Sets the card_no of this Card.


        :param card_no: The card_no of this Card.
        :type card_no: str
        """

        self._card_no = card_no

    @property
    def card_password(self) -> str:
        """Gets the card_password of this Card.


        :return: The card_password of this Card.
        :rtype: str
        """
        return self._card_password

    @card_password.setter
    def card_password(self, card_password: str):
        """Sets the card_password of this Card.


        :param card_password: The card_password of this Card.
        :type card_password: str
        """

        self._card_password = card_password

    @property
    def card_type(self) -> int:
        """Gets the card_type of this Card.

        卡类型：1- 普通卡（默认），2- 残疾人卡，3- 黑名单卡，4- 巡更卡，5- 胁迫卡，6- 超级卡，7- 来宾卡，8- 解除卡，9- 员工卡，10- 应急卡，11- 应急管理卡  # noqa: E501

        :return: The card_type of this Card.
        :rtype: int
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type: int):
        """Sets the card_type of this Card.

        卡类型：1- 普通卡（默认），2- 残疾人卡，3- 黑名单卡，4- 巡更卡，5- 胁迫卡，6- 超级卡，7- 来宾卡，8- 解除卡，9- 员工卡，10- 应急卡，11- 应急管理卡  # noqa: E501

        :param card_type: The card_type of this Card.
        :type card_type: int
        """

        self._card_type = card_type

    @property
    def valid(self) -> bool:
        """Gets the valid of this Card.

          # noqa: E501

        :return: The valid of this Card.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid: bool):
        """Sets the valid of this Card.

          # noqa: E501

        :param valid: The valid of this Card.
        :type valid: bool
        """

        self._valid = valid
