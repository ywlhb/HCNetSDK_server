# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util

import base64


class LoginInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, device_address: str=None, user_name: str=None, password: str=None, port: int=8000):  # noqa: E501
        """LoginInfo - a model defined in Swagger

        :param device_address: The device_address of this LoginInfo.  # noqa: E501
        :type device_address: str
        :param user_name: The user_name of this LoginInfo.  # noqa: E501
        :type user_name: str
        :param password: The password of this LoginInfo.  # noqa: E501
        :type password: str
        :param port: The port of this LoginInfo.  # noqa: E501
        :type port: int
        """
        self.swagger_types = {
            'device_address': str,
            'user_name': str,
            'password': str,
            'port': int
        }

        self.attribute_map = {
            'device_address': 'deviceAddress',
            'user_name': 'userName',
            'password': 'password',
            'port': 'port'
        }

        self._device_address = device_address
        self._user_name = user_name
        self._password = password
        self._port = port

    def to_base64(self) -> str:
        strRe = self.device_address
        strRe += ";" + self.user_name
        strRe += ";" + self.password
        strRe += ";" + str(self.port)
        
        return base64.b64encode(bytes(strRe, encoding="utf8")).decode(
            encoding="utf-8", errors="strict")

    def to_dict(self) -> dict:
        re = {}
        re["Address"] = self.device_address
        re["UserName"] = self.user_name
        re["Password"] = self.password
        re["Port"] = self.port
        return re

    @classmethod
    def from_string(cls, st: str) -> 'LoginInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoginInfo of this LoginInfo.  # noqa: E501
        :rtype: LoginInfo
        """
        stt = base64.b64decode(st).decode(
            encoding="utf-8", errors="strict")
        sa = stt.split(";")
        re = cls()
        re.device_address = sa[0]
        re.user_name = sa[1]
        re.password = sa[2]
        re.port = int(sa[3])
        return re

    @classmethod
    def from_dict(cls, dikt) -> 'LoginInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LoginInfo of this LoginInfo.  # noqa: E501
        :rtype: LoginInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_address(self) -> str:
        """Gets the device_address of this LoginInfo.

        IP  # noqa: E501

        :return: The device_address of this LoginInfo.
        :rtype: str
        """
        return self._device_address

    @device_address.setter
    def device_address(self, device_address: str):
        """Sets the device_address of this LoginInfo.

        IP  # noqa: E501

        :param device_address: The device_address of this LoginInfo.
        :type device_address: str
        """

        self._device_address = device_address

    @property
    def user_name(self) -> str:
        """Gets the user_name of this LoginInfo.


        :return: The user_name of this LoginInfo.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this LoginInfo.


        :param user_name: The user_name of this LoginInfo.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def password(self) -> str:
        """Gets the password of this LoginInfo.


        :return: The password of this LoginInfo.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this LoginInfo.


        :param password: The password of this LoginInfo.
        :type password: str
        """

        self._password = password

    @property
    def port(self) -> int:
        """Gets the port of this LoginInfo.


        :return: The port of this LoginInfo.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this LoginInfo.


        :param port: The port of this LoginInfo.
        :type port: int
        """

        self._port = port
