# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.authorize import Authorize  # noqa: F401,E501
from swagger_server.models.card import Card  # noqa: F401,E501
from swagger_server.models.face import Face  # noqa: F401,E501
from swagger_server.models.finger import Finger  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, name: str=None, valid: bool=True, authorize: Authorize=None, cards: List[Card]=None, fingers: List[Finger]=None, faces: List[Face]=None):  # noqa: E501
        """User - a model defined in Swagger

        :param code: The code of this User.  # noqa: E501
        :type code: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param valid: The valid of this User.  # noqa: E501
        :type valid: bool
        :param authorize: The authorize of this User.  # noqa: E501
        :type authorize: Authorize
        :param cards: The cards of this User.  # noqa: E501
        :type cards: List[Card]
        :param fingers: The fingers of this User.  # noqa: E501
        :type fingers: List[Finger]
        :param faces: The faces of this User.  # noqa: E501
        :type faces: List[Face]
        """
        self.swagger_types = {
            'code': str,
            'name': str,
            'valid': bool,
            'authorize': Authorize,
            'cards': List[Card],
            'fingers': List[Finger],
            'faces': List[Face]
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name',
            'valid': 'valid',
            'authorize': 'authorize',
            'cards': 'cards',
            'fingers': 'Fingers',
            'faces': 'Faces'
        }

        self._code = code
        self._name = name
        self._valid = valid
        self._authorize = authorize
        self._cards = cards
        self._fingers = fingers
        self._faces = faces

    def to_cardinfo_dict(self):
        re = {}
        re["CardNo"] = self.cards[0].card_no
        re["CardValid"] = self.cards[0].valid
        re["EmployeeNo"] = self.code
        re["Name"] = self.name

        if len(self.faces) > 0:
            re["Faces"] = []
            for f in self.faces:
                if f.index < 1 or f.index > 2:
                    continue
                re["Faces"].append({"FaceID": f.index,
                                    "Facedata": f.data,
                                    "Valid": f.valid})
        if len(self.fingers) > 0:
            re["Fingers"] = []
            for f in self.fingers:
                if f.index < 1 or f.index > 10:
                    continue
                re["Fingers"].append({"FingerID": f.index,
                                      "Fingerdata": f.data,
                                      "Valid": f.valid})
        return re

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this User.


        :return: The code of this User.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this User.


        :param code: The code of this User.
        :type code: str
        """

        self._code = code

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def valid(self) -> bool:
        """Gets the valid of this User.

          # noqa: E501

        :return: The valid of this User.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid: bool):
        """Sets the valid of this User.

          # noqa: E501

        :param valid: The valid of this User.
        :type valid: bool
        """

        self._valid = valid

    @property
    def authorize(self) -> Authorize:
        """Gets the authorize of this User.


        :return: The authorize of this User.
        :rtype: Authorize
        """
        return self._authorize

    @authorize.setter
    def authorize(self, authorize: Authorize):
        """Sets the authorize of this User.


        :param authorize: The authorize of this User.
        :type authorize: Authorize
        """

        self._authorize = authorize

    @property
    def cards(self) -> List[Card]:
        """Gets the cards of this User.


        :return: The cards of this User.
        :rtype: List[Card]
        """
        return self._cards

    @cards.setter
    def cards(self, cards: List[Card]):
        """Sets the cards of this User.


        :param cards: The cards of this User.
        :type cards: List[Card]
        """

        self._cards = cards

    @property
    def fingers(self) -> List[Finger]:
        """Gets the fingers of this User.


        :return: The fingers of this User.
        :rtype: List[Finger]
        """
        return self._fingers

    @fingers.setter
    def fingers(self, fingers: List[Finger]):
        """Sets the fingers of this User.


        :param fingers: The fingers of this User.
        :type fingers: List[Finger]
        """

        self._fingers = fingers

    @property
    def faces(self) -> List[Face]:
        """Gets the faces of this User.


        :return: The faces of this User.
        :rtype: List[Face]
        """
        return self._faces

    @faces.setter
    def faces(self, faces: List[Face]):
        """Sets the faces of this User.


        :param faces: The faces of this User.
        :type faces: List[Face]
        """

        self._faces = faces
